// This file is auto-generated by @hey-api/openapi-ts

export const AssetStatsSchema = {
    properties: {
        carbon_sunk: {
            type: 'string',
            title: 'Carbon Sunk'
        },
        carbon_retired: {
            type: 'string',
            title: 'Carbon Retired'
        },
        carbon_pending: {
            type: 'string',
            title: 'Carbon Pending'
        },
        carbon_stored: {
            type: 'string',
            title: 'Carbon Stored'
        }
    },
    type: 'object',
    required: ['carbon_sunk', 'carbon_retired', 'carbon_pending', 'carbon_stored'],
    title: 'AssetStats'
} as const;

export const CARBONQuoteResponseSchema = {
    properties: {
        carbon_amount: {
            type: 'string',
            title: 'Carbon Amount'
        },
        total_cost: {
            type: 'string',
            title: 'Total Cost'
        },
        average_price: {
            type: 'string',
            title: 'Average Price'
        }
    },
    type: 'object',
    required: ['carbon_amount', 'total_cost', 'average_price'],
    title: 'CARBONQuoteResponse'
} as const;

export const CabinClassSchema = {
    type: 'string',
    enum: ['economy', 'premium-economy', 'business'],
    title: 'CabinClass'
} as const;

export const CarbonStatsSchema = {
    properties: {
        carbon_sunk: {
            type: 'string',
            title: 'Carbon Sunk'
        },
        carbon_retired: {
            type: 'string',
            title: 'Carbon Retired'
        },
        carbon_pending: {
            type: 'string',
            title: 'Carbon Pending'
        }
    },
    type: 'object',
    required: ['carbon_sunk', 'carbon_retired', 'carbon_pending'],
    title: 'CarbonStats'
} as const;

export const CreateRecipientPayloadSchema = {
    properties: {
        address: {
            type: 'string',
            pattern: '^[GMC][A-Z2-7]{55}$',
            title: 'the address that is used to identify this recipient'
        },
        email: {
            type: 'string',
            format: 'email',
            title: "the recipient's email address"
        },
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 200
                },
                {
                    type: 'null'
                }
            ],
            title: "the recipient's name"
        }
    },
    type: 'object',
    required: ['address', 'email'],
    title: 'CreateRecipientPayload'
} as const;

export const DestAssetItemSchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code'
        },
        issuer: {
            type: 'string',
            title: 'Issuer'
        },
        amount: {
            type: 'string',
            title: 'Amount'
        }
    },
    type: 'object',
    required: ['code', 'issuer', 'amount'],
    title: 'DestAssetItem'
} as const;

export const FlightEstimateResponseSchema = {
    properties: {
        departure_name: {
            type: 'string',
            title: 'Departure Name'
        },
        destination_name: {
            type: 'string',
            title: 'Destination Name'
        },
        distance_km: {
            type: 'string',
            title: 'Distance Km'
        },
        co2_tonnes: {
            type: 'string',
            title: 'Co2 Tonnes'
        }
    },
    type: 'object',
    required: ['departure_name', 'destination_name', 'distance_km', 'co2_tonnes'],
    title: 'FlightEstimateResponse'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const InstrumentItemSchema = {
    properties: {
        issuance_date: {
            type: 'string',
            format: 'date',
            title: 'Issuance Date'
        },
        instrument_type: {
            type: 'string',
            const: 'VCU',
            title: 'Instrument Type'
        },
        vintage_start: {
            type: 'string',
            format: 'date',
            title: 'Vintage Start'
        },
        vintage_end: {
            type: 'string',
            format: 'date',
            title: 'Vintage End'
        },
        total_vintage_quantity: {
            type: 'integer',
            title: 'Total Vintage Quantity'
        }
    },
    type: 'object',
    required: ['issuance_date', 'instrument_type', 'vintage_start', 'vintage_end', 'total_vintage_quantity'],
    title: 'InstrumentItem'
} as const;

export const MemoItemSchema = {
    properties: {
        type: {
            '$ref': '#/components/schemas/MemoType'
        },
        value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value'
        }
    },
    type: 'object',
    required: ['type', 'value'],
    title: 'MemoItem'
} as const;

export const MemoTypeSchema = {
    type: 'string',
    enum: ['text', 'hash', 'none'],
    title: 'MemoType'
} as const;

export const MintedBlockItemSchema = {
    properties: {
        serial_hash: {
            type: 'string',
            title: 'Serial Hash'
        },
        size: {
            type: 'integer',
            title: 'Size'
        },
        credits_remaining: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Credits Remaining'
        },
        credits_remaining_on_date: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Credits Remaining On Date'
        },
        transaction_hash: {
            type: 'string',
            title: 'Transaction Hash'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        serial_number: {
            type: 'string',
            title: 'Serial Number'
        },
        sub_account_id: {
            type: 'integer',
            title: 'Sub Account Id'
        },
        sub_account_name: {
            type: 'string',
            title: 'Sub Account Name'
        },
        vintage_start: {
            type: 'string',
            format: 'date',
            title: 'Vintage Start'
        },
        vintage_end: {
            type: 'string',
            format: 'date',
            title: 'Vintage End'
        },
        vcs_project: {
            '$ref': '#/components/schemas/VcsProjectSummary'
        }
    },
    type: 'object',
    required: ['serial_hash', 'size', 'transaction_hash', 'created_at', 'serial_number', 'sub_account_id', 'sub_account_name', 'vintage_start', 'vintage_end', 'vcs_project'],
    title: 'MintedBlockItem'
} as const;

export const MintedBlockListResponseSchema = {
    properties: {
        total_credits_minted: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Credits Minted'
        },
        total_credits_remaining: {
            type: 'integer',
            title: 'Total Credits Remaining'
        },
        minted_blocks: {
            items: {
                '$ref': '#/components/schemas/MintedBlockItem'
            },
            type: 'array',
            title: 'Minted Blocks'
        }
    },
    type: 'object',
    required: ['total_credits_remaining', 'minted_blocks'],
    title: 'MintedBlockListResponse'
} as const;

export const NotFoundErrorItemSchema = {
    properties: {
        loc: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Loc'
        },
        msg: {
            type: 'string',
            title: 'Msg'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        funder: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Funder'
        },
        recipient: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recipient'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type', 'funder', 'recipient'],
    title: 'NotFoundErrorItem'
} as const;

export const NotFoundErrorResponseSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/NotFoundErrorItem'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['detail'],
    title: 'NotFoundErrorResponse'
} as const;

export const PaymentAssetSchema = {
    type: 'string',
    enum: ['XLM', 'USDC', 'any'],
    title: 'PaymentAsset'
} as const;

export const RecipientSchema = {
    properties: {
        modified_at: {
            type: 'string',
            format: 'date-time',
            title: 'the time at which this recipient was last updated'
        },
        email: {
            type: 'string',
            format: 'email',
            title: "the recipient's email address"
        },
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 200
                },
                {
                    type: 'null'
                }
            ],
            title: "the recipient's name"
        }
    },
    type: 'object',
    required: ['modified_at', 'email'],
    title: 'Recipient'
} as const;

export const RecipientCreatedResponseSchema = {
    properties: {
        address: {
            type: 'string',
            pattern: '^[GMC][A-Z2-7]{55}$',
            title: 'the address that is used to identify this recipient'
        },
        message: {
            type: 'string',
            title: 'Message'
        },
        recipient: {
            '$ref': '#/components/schemas/Recipient'
        }
    },
    type: 'object',
    required: ['address', 'message', 'recipient'],
    title: 'RecipientCreatedResponse'
} as const;

export const RecipientFieldsPatchSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: "the recipient's email address"
        },
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 200
                },
                {
                    type: 'null'
                }
            ],
            title: "the recipient's name"
        }
    },
    type: 'object',
    title: 'RecipientFieldsPatch'
} as const;

export const RequestCertificateResponseSchema = {
    properties: {
        account: {
            type: 'string',
            title: 'Account'
        },
        certificate_amount: {
            type: 'integer',
            title: 'Certificate Amount'
        },
        pending_balance_after_retirement: {
            type: 'string',
            title: 'Pending Balance After Retirement'
        }
    },
    type: 'object',
    required: ['account', 'certificate_amount', 'pending_balance_after_retirement'],
    title: 'RequestCertificateResponse'
} as const;

export const RetiredFromBlockSchema = {
    properties: {
        block_hash: {
            type: 'string',
            title: 'Block Hash'
        },
        vcu_amount: {
            type: 'integer',
            title: 'Vcu Amount'
        }
    },
    type: 'object',
    required: ['block_hash', 'vcu_amount'],
    title: 'RetiredFromBlock'
} as const;

export const RetirementDetailSchema = {
    properties: {
        certificate_id: {
            type: 'integer',
            title: 'Certificate Id'
        },
        registry_url: {
            type: 'string',
            title: 'Registry Url'
        },
        vcu_amount: {
            type: 'integer',
            title: 'Vcu Amount'
        },
        serial_number: {
            type: 'string',
            title: 'Serial Number'
        },
        retirement_date: {
            type: 'string',
            format: 'date',
            title: 'Retirement Date'
        },
        beneficiary: {
            type: 'string',
            title: 'Beneficiary'
        },
        details: {
            type: 'string',
            title: 'Details'
        },
        vcs_project: {
            '$ref': '#/components/schemas/VcsProjectDetail'
        },
        instrument: {
            '$ref': '#/components/schemas/InstrumentItem'
        },
        retired_from: {
            items: {
                '$ref': '#/components/schemas/RetiredFromBlock'
            },
            type: 'array',
            title: 'Retired From'
        },
        sink_statuses: {
            items: {
                '$ref': '#/components/schemas/SinkTxSummary'
            },
            type: 'array',
            title: 'Sink Statuses'
        }
    },
    type: 'object',
    required: ['certificate_id', 'registry_url', 'vcu_amount', 'serial_number', 'retirement_date', 'beneficiary', 'details', 'vcs_project', 'instrument', 'retired_from', 'sink_statuses'],
    title: 'RetirementDetail'
} as const;

export const RetirementItemSchema = {
    properties: {
        certificate_id: {
            type: 'integer',
            title: 'Certificate Id'
        },
        registry_url: {
            type: 'string',
            title: 'Registry Url'
        },
        vcu_amount: {
            type: 'integer',
            title: 'Vcu Amount'
        },
        serial_number: {
            type: 'string',
            title: 'Serial Number'
        },
        retirement_date: {
            type: 'string',
            format: 'date',
            title: 'Retirement Date'
        },
        beneficiary: {
            type: 'string',
            title: 'Beneficiary'
        },
        details: {
            type: 'string',
            title: 'Details'
        },
        vcs_project_id: {
            type: 'integer',
            title: 'Vcs Project Id'
        },
        instrument: {
            '$ref': '#/components/schemas/InstrumentItem'
        }
    },
    type: 'object',
    required: ['certificate_id', 'registry_url', 'vcu_amount', 'serial_number', 'retirement_date', 'beneficiary', 'details', 'vcs_project_id', 'instrument'],
    title: 'RetirementItem'
} as const;

export const RetirementListResponseSchema = {
    properties: {
        total_carbon_retired: {
            type: 'integer',
            title: 'Total Carbon Retired'
        },
        retirements: {
            items: {
                '$ref': '#/components/schemas/RetirementItem'
            },
            type: 'array',
            title: 'Retirements'
        }
    },
    type: 'object',
    required: ['total_carbon_retired', 'retirements'],
    title: 'RetirementListResponse'
} as const;

export const RetirementSummarySchema = {
    properties: {
        certificate_id: {
            type: 'integer',
            title: 'Certificate Id'
        },
        amount_filled: {
            type: 'string',
            title: 'Amount Filled'
        },
        finalized: {
            type: 'boolean',
            title: 'Finalized'
        }
    },
    type: 'object',
    required: ['certificate_id', 'amount_filled', 'finalized'],
    title: 'RetirementSummary'
} as const;

export const SEP10ChallengeResponseSchema = {
    properties: {
        transaction: {
            type: 'string',
            title: 'Transaction'
        },
        network_passphrase: {
            type: 'string',
            title: 'Network Passphrase'
        }
    },
    type: 'object',
    required: ['transaction', 'network_passphrase'],
    title: 'SEP10ChallengeResponse'
} as const;

export const SEP10ErrorResponseSchema = {
    properties: {
        detail: {
            type: 'string',
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['detail'],
    title: 'SEP10ErrorResponse'
} as const;

export const SEP10TokenResponseSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'SEP10TokenResponse'
} as const;

export const SinkTxItemSchema = {
    properties: {
        hash: {
            type: 'string',
            title: 'Hash'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        funder: {
            type: 'string',
            title: 'Funder'
        },
        recipient: {
            type: 'string',
            title: 'Recipient'
        },
        carbon_amount: {
            type: 'string',
            title: 'Carbon Amount'
        },
        source_asset: {
            '$ref': '#/components/schemas/SourceAssetItem'
        },
        dest_asset: {
            '$ref': '#/components/schemas/DestAssetItem'
        },
        vcs_project_id: {
            type: 'integer',
            title: 'Vcs Project Id'
        },
        memo: {
            '$ref': '#/components/schemas/MemoItem'
        },
        paging_token: {
            type: 'string',
            title: 'Paging Token'
        },
        retirement_finalized: {
            type: 'boolean',
            title: 'Retirement Finalized'
        },
        retirements: {
            items: {
                '$ref': '#/components/schemas/RetirementSummary'
            },
            type: 'array',
            title: 'Retirements'
        }
    },
    type: 'object',
    required: ['hash', 'created_at', 'funder', 'recipient', 'carbon_amount', 'source_asset', 'dest_asset', 'vcs_project_id', 'memo', 'paging_token', 'retirement_finalized', 'retirements'],
    title: 'SinkTxItem'
} as const;

export const SinkTxListResponseSchema = {
    properties: {
        retirement_grace_days: {
            type: 'integer',
            title: 'Retirement Grace Days'
        },
        total_carbon_sunk: {
            type: 'string',
            title: 'Total Carbon Sunk'
        },
        total_carbon_retired: {
            type: 'string',
            title: 'Total Carbon Retired'
        },
        total_carbon_pending: {
            type: 'string',
            title: 'Total Carbon Pending'
        },
        transactions: {
            items: {
                '$ref': '#/components/schemas/SinkTxItem'
            },
            type: 'array',
            title: 'Transactions'
        }
    },
    type: 'object',
    required: ['retirement_grace_days', 'total_carbon_sunk', 'total_carbon_retired', 'total_carbon_pending', 'transactions'],
    title: 'SinkTxListResponse'
} as const;

export const SinkTxSummarySchema = {
    properties: {
        sinking_tx_hash: {
            type: 'string',
            title: 'Sinking Tx Hash'
        },
        amount_filled: {
            type: 'string',
            title: 'Amount Filled'
        },
        finalized: {
            type: 'boolean',
            title: 'Finalized'
        }
    },
    type: 'object',
    required: ['sinking_tx_hash', 'amount_filled', 'finalized'],
    title: 'SinkTxSummary'
} as const;

export const SinkingResponseSchema = {
    properties: {
        funder: {
            type: 'string',
            title: 'Funder'
        },
        recipient: {
            type: 'string',
            title: 'Recipient'
        },
        carbon_amount: {
            type: 'string',
            title: 'Carbon Amount'
        },
        usdc_amount: {
            type: 'string',
            title: 'Usdc Amount'
        },
        payment_asset: {
            type: 'string',
            title: 'Payment Asset'
        },
        payment_max_amount: {
            type: 'string',
            title: 'Payment Max Amount'
        },
        vcs_project_id: {
            type: 'integer',
            title: 'Vcs Project Id'
        },
        tx_xdr: {
            type: 'string',
            title: 'Tx Xdr'
        }
    },
    type: 'object',
    required: ['funder', 'recipient', 'carbon_amount', 'usdc_amount', 'payment_asset', 'payment_max_amount', 'vcs_project_id', 'tx_xdr'],
    title: 'SinkingResponse'
} as const;

export const SourceAssetItemSchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code'
        },
        issuer: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Issuer'
        },
        amount: {
            type: 'string',
            title: 'Amount'
        }
    },
    type: 'object',
    required: ['code', 'issuer', 'amount'],
    title: 'SourceAssetItem'
} as const;

export const USDQuoteResponseSchema = {
    properties: {
        usd_amount: {
            type: 'string',
            title: 'Usd Amount'
        },
        total_carbon: {
            type: 'string',
            title: 'Total Carbon'
        }
    },
    type: 'object',
    required: ['usd_amount', 'total_carbon'],
    title: 'USDQuoteResponse'
} as const;

export const UpstreamErrorItemSchema = {
    properties: {
        msg: {
            type: 'string',
            title: 'Msg'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        url: {
            type: 'string',
            title: 'Url'
        },
        response: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Response'
        }
    },
    type: 'object',
    required: ['msg', 'type', 'url', 'response'],
    title: 'UpstreamErrorItem'
} as const;

export const UpstreamErrorResponseSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/UpstreamErrorItem'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['detail'],
    title: 'UpstreamErrorResponse'
} as const;

export const ValidateChallengeBodySchema = {
    properties: {
        transaction: {
            type: 'string',
            minLength: 25,
            title: 'Transaction'
        }
    },
    type: 'object',
    required: ['transaction'],
    title: 'ValidateChallengeBody'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const VcsProjectSchema = {
    type: 'string',
    enum: ['1360'],
    title: 'VcsProject'
} as const;

export const VcsProjectDetailSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        registry_url: {
            type: 'string',
            title: 'Registry Url'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        category: {
            type: 'string',
            title: 'Category'
        },
        protocol: {
            type: 'string',
            title: 'Protocol'
        },
        additional_certifications: {
            type: 'string',
            title: 'Additional Certifications'
        },
        region: {
            type: 'string',
            title: 'Region'
        },
        country: {
            type: 'string',
            title: 'Country'
        }
    },
    type: 'object',
    required: ['id', 'registry_url', 'name', 'category', 'protocol', 'additional_certifications', 'region', 'country'],
    title: 'VcsProjectDetail'
} as const;

export const VcsProjectSummarySchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        registry_url: {
            type: 'string',
            title: 'Registry Url'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        category: {
            type: 'string',
            title: 'Category'
        }
    },
    type: 'object',
    required: ['id', 'registry_url', 'name', 'category'],
    title: 'VcsProjectSummary'
} as const;
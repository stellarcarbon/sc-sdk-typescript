// This file is auto-generated by @hey-api/openapi-ts

/**
 * AssetStats
 */
export type AssetStats = {
    /**
     * Carbon Sunk
     */
    carbon_sunk: string;
    /**
     * Carbon Retired
     */
    carbon_retired: string;
    /**
     * Carbon Pending
     */
    carbon_pending: string;
    /**
     * Carbon Stored
     */
    carbon_stored: string;
};

/**
 * CARBONQuoteResponse
 */
export type CarbonQuoteResponse = {
    /**
     * Carbon Amount
     */
    carbon_amount: string;
    /**
     * Total Cost
     */
    total_cost: string;
    /**
     * Average Price
     */
    average_price: string;
};

/**
 * CabinClass
 */
export type CabinClass = 'economy' | 'premium-economy' | 'business';

/**
 * CarbonStats
 */
export type CarbonStats = {
    /**
     * Carbon Sunk
     */
    carbon_sunk: string;
    /**
     * Carbon Retired
     */
    carbon_retired: string;
    /**
     * Carbon Pending
     */
    carbon_pending: string;
};

/**
 * CreateRecipientPayload
 */
export type CreateRecipientPayload = {
    /**
     * the address that is used to identify this recipient
     */
    address: string;
    /**
     * the recipient's email address
     */
    email: string;
    /**
     * the recipient's name
     */
    name?: string | null;
};

/**
 * CreditBatch
 */
export type CreditBatch = {
    /**
     * Quantity Of Credits
     */
    quantity_of_credits: number;
    /**
     * Serial Number
     */
    serial_number: string;
    /**
     * Sub Account Id
     */
    sub_account_id: number;
    /**
     * Sub Account Name
     */
    sub_account_name: string;
    /**
     * Vintage
     */
    vintage: string;
    /**
     * Project Id
     */
    project_id: number;
    /**
     * Project Name
     */
    project_name: string;
    /**
     * Project Type
     */
    project_type: string;
};

/**
 * DestAssetItem
 */
export type DestAssetItem = {
    /**
     * Code
     */
    code: string;
    /**
     * Issuer
     */
    issuer: string;
    /**
     * Amount
     */
    amount: string;
};

/**
 * FlightEstimateResponse
 */
export type FlightEstimateResponse = {
    /**
     * Departure Name
     */
    departure_name: string;
    /**
     * Destination Name
     */
    destination_name: string;
    /**
     * Distance Km
     */
    distance_km: string;
    /**
     * Co2 Tonnes
     */
    co2_tonnes: string;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * InstrumentItem
 */
export type InstrumentItem = {
    /**
     * Issuance Date
     */
    issuance_date: string;
    /**
     * Instrument Type
     */
    instrument_type: 'VCU';
    /**
     * Vintage Start
     */
    vintage_start: string;
    /**
     * Vintage End
     */
    vintage_end: string;
    /**
     * Total Vintage Quantity
     */
    total_vintage_quantity: number;
};

/**
 * MemoItem
 */
export type MemoItem = {
    type: MemoType;
    /**
     * Value
     */
    value: string | null;
};

/**
 * MemoType
 */
export type MemoType = 'text' | 'hash' | 'none';

/**
 * MintedBlockItem
 */
export type MintedBlockItem = {
    /**
     * Serial Hash
     */
    serial_hash: string;
    /**
     * Size
     */
    size: number;
    /**
     * Credits Remaining
     */
    credits_remaining?: number | null;
    /**
     * Credits Remaining On Date
     */
    credits_remaining_on_date?: number | null;
    /**
     * Transaction Hash
     */
    transaction_hash: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Serial Number
     */
    serial_number: string;
    /**
     * Sub Account Id
     */
    sub_account_id: number;
    /**
     * Sub Account Name
     */
    sub_account_name: string;
    /**
     * Vintage Start
     */
    vintage_start: string;
    /**
     * Vintage End
     */
    vintage_end: string;
    vcs_project: VcsProjectSummary;
};

/**
 * MintedBlockListResponse
 */
export type MintedBlockListResponse = {
    /**
     * Total Credits Minted
     */
    total_credits_minted?: number | null;
    /**
     * Total Credits Remaining
     */
    total_credits_remaining: number;
    /**
     * Minted Blocks
     */
    minted_blocks: Array<MintedBlockItem>;
};

/**
 * NotFoundErrorItem
 */
export type NotFoundErrorItem = {
    /**
     * Loc
     */
    loc: Array<string>;
    /**
     * Msg
     */
    msg: string;
    /**
     * Type
     */
    type: string;
    /**
     * Funder
     */
    funder: string | null;
    /**
     * Recipient
     */
    recipient: string | null;
};

/**
 * NotFoundErrorResponse
 */
export type NotFoundErrorResponse = {
    /**
     * Detail
     */
    detail: Array<NotFoundErrorItem>;
};

/**
 * PaymentAsset
 */
export type PaymentAsset = 'XLM' | 'USDC' | 'any';

/**
 * Recipient
 */
export type Recipient = {
    /**
     * the time at which this recipient was last updated
     */
    modified_at: string;
    /**
     * the recipient's email address
     */
    email: string;
    /**
     * the recipient's name
     */
    name?: string | null;
};

/**
 * RecipientCreatedResponse
 */
export type RecipientCreatedResponse = {
    /**
     * the address that is used to identify this recipient
     */
    address: string;
    /**
     * Message
     */
    message: string;
    recipient: Recipient;
};

/**
 * RecipientFields
 */
export type RecipientFields = {
    /**
     * the recipient's email address
     */
    email: string;
    /**
     * the recipient's name
     */
    name?: string | null;
};

/**
 * RequestCertificateResponse
 */
export type RequestCertificateResponse = {
    /**
     * Account
     */
    account: string;
    /**
     * Certificate Amount
     */
    certificate_amount: number;
    /**
     * Pending Balance After Retirement
     */
    pending_balance_after_retirement: string;
};

/**
 * RetiredFromBlock
 */
export type RetiredFromBlock = {
    /**
     * Block Hash
     */
    block_hash: string;
    /**
     * Vcu Amount
     */
    vcu_amount: number;
};

/**
 * RetirementDetail
 */
export type RetirementDetail = {
    /**
     * Certificate Id
     */
    certificate_id: number;
    /**
     * Registry Url
     */
    registry_url: string;
    /**
     * Vcu Amount
     */
    vcu_amount: number;
    /**
     * Serial Number
     */
    serial_number: string;
    /**
     * Retirement Date
     */
    retirement_date: string;
    /**
     * Beneficiary
     */
    beneficiary: string;
    /**
     * Details
     */
    details: string;
    vcs_project: VcsProjectDetail;
    instrument: InstrumentItem;
    /**
     * Retired From
     */
    retired_from: Array<RetiredFromBlock>;
    /**
     * Sink Statuses
     */
    sink_statuses: Array<SinkTxSummary>;
};

/**
 * RetirementItem
 */
export type RetirementItem = {
    /**
     * Certificate Id
     */
    certificate_id: number;
    /**
     * Registry Url
     */
    registry_url: string;
    /**
     * Vcu Amount
     */
    vcu_amount: number;
    /**
     * Serial Number
     */
    serial_number: string;
    /**
     * Retirement Date
     */
    retirement_date: string;
    /**
     * Beneficiary
     */
    beneficiary: string;
    /**
     * Details
     */
    details: string;
    /**
     * Vcs Project Id
     */
    vcs_project_id: number;
    instrument: InstrumentItem;
};

/**
 * RetirementListResponse
 */
export type RetirementListResponse = {
    /**
     * Total Carbon Retired
     */
    total_carbon_retired: number;
    /**
     * Retirements
     */
    retirements: Array<RetirementItem>;
};

/**
 * RetirementSummary
 */
export type RetirementSummary = {
    /**
     * Certificate Id
     */
    certificate_id: number;
    /**
     * Amount Filled
     */
    amount_filled: string;
    /**
     * Finalized
     */
    finalized: boolean;
};

/**
 * SEP10ChallengeResponse
 */
export type Sep10ChallengeResponse = {
    /**
     * Transaction
     */
    transaction: string;
    /**
     * Network Passphrase
     */
    network_passphrase: string;
};

/**
 * SEP10ErrorResponse
 */
export type Sep10ErrorResponse = {
    /**
     * Detail
     */
    detail: string;
};

/**
 * SEP10TokenResponse
 */
export type Sep10TokenResponse = {
    /**
     * Token
     */
    token: string;
};

/**
 * SinkTxItem
 */
export type SinkTxItem = {
    /**
     * Hash
     */
    hash: string;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Funder
     */
    funder: string;
    /**
     * Recipient
     */
    recipient: string;
    /**
     * Carbon Amount
     */
    carbon_amount: string;
    source_asset: SourceAssetItem;
    dest_asset: DestAssetItem;
    /**
     * Vcs Project Id
     */
    vcs_project_id: number;
    memo: MemoItem;
    /**
     * Paging Token
     */
    paging_token: string;
    /**
     * Retirement Finalized
     */
    retirement_finalized: boolean;
    /**
     * Retirements
     */
    retirements: Array<RetirementSummary>;
};

/**
 * SinkTxListResponse
 */
export type SinkTxListResponse = {
    /**
     * Retirement Grace Days
     */
    retirement_grace_days: number;
    /**
     * Total Carbon Sunk
     */
    total_carbon_sunk: string;
    /**
     * Total Carbon Retired
     */
    total_carbon_retired: string;
    /**
     * Total Carbon Pending
     */
    total_carbon_pending: string;
    /**
     * Transactions
     */
    transactions: Array<SinkTxItem>;
};

/**
 * SinkTxSummary
 */
export type SinkTxSummary = {
    /**
     * Sinking Tx Hash
     */
    sinking_tx_hash: string;
    /**
     * Amount Filled
     */
    amount_filled: string;
    /**
     * Finalized
     */
    finalized: boolean;
};

/**
 * SinkingResponse
 */
export type SinkingResponse = {
    /**
     * Funder
     */
    funder: string;
    /**
     * Recipient
     */
    recipient: string;
    /**
     * Carbon Amount
     */
    carbon_amount: string;
    /**
     * Usdc Amount
     */
    usdc_amount: string;
    /**
     * Payment Asset
     */
    payment_asset: string;
    /**
     * Payment Max Amount
     */
    payment_max_amount: string;
    /**
     * Vcs Project Id
     */
    vcs_project_id: number;
    /**
     * Tx Xdr
     */
    tx_xdr: string;
    /**
     * Txrep
     * @deprecated
     */
    txrep?: string;
};

/**
 * SourceAssetItem
 */
export type SourceAssetItem = {
    /**
     * Code
     */
    code: string;
    /**
     * Issuer
     */
    issuer: string | null;
    /**
     * Amount
     */
    amount: string;
};

/**
 * USDQuoteResponse
 */
export type UsdQuoteResponse = {
    /**
     * Usd Amount
     */
    usd_amount: string;
    /**
     * Total Carbon
     */
    total_carbon: string;
};

/**
 * UpstreamErrorItem
 */
export type UpstreamErrorItem = {
    /**
     * Msg
     */
    msg: string;
    /**
     * Type
     */
    type: string;
    /**
     * Url
     */
    url: string;
    /**
     * Response
     */
    response: string | null;
};

/**
 * UpstreamErrorResponse
 */
export type UpstreamErrorResponse = {
    /**
     * Detail
     */
    detail: Array<UpstreamErrorItem>;
};

/**
 * ValidateChallengeBody
 */
export type ValidateChallengeBody = {
    /**
     * Transaction
     */
    transaction: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * VcsProject
 */
export type VcsProject = '1360';

/**
 * VcsProjectDetail
 */
export type VcsProjectDetail = {
    /**
     * Id
     */
    id: number;
    /**
     * Registry Url
     */
    registry_url: string;
    /**
     * Name
     */
    name: string;
    /**
     * Category
     */
    category: string;
    /**
     * Protocol
     */
    protocol: string;
    /**
     * Additional Certifications
     */
    additional_certifications: string;
    /**
     * Region
     */
    region: string;
    /**
     * Country
     */
    country: string;
};

/**
 * VcsProjectSummary
 */
export type VcsProjectSummary = {
    /**
     * Id
     */
    id: number;
    /**
     * Registry Url
     */
    registry_url: string;
    /**
     * Name
     */
    name: string;
    /**
     * Category
     */
    category: string;
};

/**
 * VerraInventoryResponse
 */
export type VerraInventoryResponse = {
    /**
     * Total Inventory Credits
     */
    total_inventory_credits: number;
    /**
     * Credit Batches
     */
    credit_batches: Array<CreditBatch>;
};

/**
 * VerraRetirementItem
 */
export type VerraRetirementItem = {
    /**
     * Issuance Date
     */
    issuance_date: string;
    /**
     * Instrument Type
     */
    instrument_type: string;
    /**
     * Vintage Start
     */
    vintage_start: string;
    /**
     * Vintage End
     */
    vintage_end: string;
    /**
     * Total Vintage Quantity
     */
    total_vintage_quantity: number;
    /**
     * Vcs Id
     */
    vcs_id: string;
    /**
     * Vcs Name
     */
    vcs_name: string;
    /**
     * Vcs Category
     */
    vcs_category: string;
    /**
     * Vcs Protocol
     */
    vcs_protocol: string;
    /**
     * Additional Certifications
     */
    additional_certifications: string;
    /**
     * Region
     */
    region: string;
    /**
     * Country
     */
    country: string;
    /**
     * Vcu Amount
     */
    vcu_amount: number;
    /**
     * Serial Numbers
     */
    serial_numbers: string;
    /**
     * Retirement Date
     */
    retirement_date: string;
    /**
     * Retirement Beneficiary
     */
    retirement_beneficiary: string;
    /**
     * Retirement Details
     */
    retirement_details: string;
    /**
     * Certificate Id
     */
    certificate_id: string;
};

/**
 * VerraRetirementsResponse
 */
export type VerraRetirementsResponse = {
    /**
     * Total Count
     */
    total_count: number;
    /**
     * Count Exceeded
     */
    count_exceeded: boolean;
    /**
     * Total Amount Retired
     */
    total_amount_retired: number;
    /**
     * Retirements
     */
    retirements: Array<VerraRetirementItem>;
};

export type GetSep10ChallengeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Account
         */
        account: string;
        /**
         * Memo
         */
        memo?: number | null;
        /**
         * Home Domain
         */
        home_domain?: string;
        /**
         * Client Domain
         */
        client_domain?: string | null;
    };
    url: '/auth/sep-10';
};

export type GetSep10ChallengeErrors = {
    /**
     * Credentials or challenge failed to validate.
     */
    400: Sep10ErrorResponse;
    /**
     * Data requested from Horizon is before recorded history
     */
    410: UpstreamErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Horizon's historical database is too stale
     */
    503: UpstreamErrorResponse;
    /**
     * Horizon could not confirm transaction inclusion (check network conditions)
     */
    504: UpstreamErrorResponse;
};

export type GetSep10ChallengeError = GetSep10ChallengeErrors[keyof GetSep10ChallengeErrors];

export type GetSep10ChallengeResponses = {
    /**
     * Successful Response
     */
    200: Sep10ChallengeResponse;
};

export type GetSep10ChallengeResponse = GetSep10ChallengeResponses[keyof GetSep10ChallengeResponses];

export type ValidateSep10ChallengeData = {
    /**
     * Challenge
     */
    body?: ValidateChallengeBody | null;
    path?: never;
    query?: {
        /**
         * Transaction
         */
        transaction?: string | null;
    };
    url: '/auth/sep-10';
};

export type ValidateSep10ChallengeErrors = {
    /**
     * Credentials or challenge failed to validate.
     */
    400: Sep10ErrorResponse;
    /**
     * Data requested from Horizon is before recorded history
     */
    410: UpstreamErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Horizon's historical database is too stale
     */
    503: UpstreamErrorResponse;
    /**
     * Horizon could not confirm transaction inclusion (check network conditions)
     */
    504: UpstreamErrorResponse;
};

export type ValidateSep10ChallengeError = ValidateSep10ChallengeErrors[keyof ValidateSep10ChallengeErrors];

export type ValidateSep10ChallengeResponses = {
    /**
     * Successful Response
     */
    200: Sep10TokenResponse;
};

export type ValidateSep10ChallengeResponse = ValidateSep10ChallengeResponses[keyof ValidateSep10ChallengeResponses];

export type DeprecatedGetCarbonQuoteData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Carbon Amount
         * requested amount of CARBON
         */
        carbon_amount?: number | string;
    };
    url: '/carbon-quote';
};

export type DeprecatedGetCarbonQuoteErrors = {
    /**
     * Horizon transaction has failed or is malformed
     */
    400: UpstreamErrorResponse;
    /**
     * Data requested from Horizon is before recorded history
     */
    410: UpstreamErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Horizon's historical database is too stale
     */
    503: UpstreamErrorResponse;
    /**
     * Horizon could not confirm transaction inclusion (check network conditions)
     */
    504: UpstreamErrorResponse;
};

export type DeprecatedGetCarbonQuoteError = DeprecatedGetCarbonQuoteErrors[keyof DeprecatedGetCarbonQuoteErrors];

export type DeprecatedGetCarbonQuoteResponses = {
    /**
     * Successful Response
     */
    200: CarbonQuoteResponse;
};

export type DeprecatedGetCarbonQuoteResponse = DeprecatedGetCarbonQuoteResponses[keyof DeprecatedGetCarbonQuoteResponses];

export type DeprecatedGetUsdQuoteData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Usd Amount
         * requested amount of USD
         */
        usd_amount?: number | string;
    };
    url: '/usd-quote';
};

export type DeprecatedGetUsdQuoteErrors = {
    /**
     * Horizon transaction has failed or is malformed
     */
    400: UpstreamErrorResponse;
    /**
     * Data requested from Horizon is before recorded history
     */
    410: UpstreamErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Horizon's historical database is too stale
     */
    503: UpstreamErrorResponse;
    /**
     * Horizon could not confirm transaction inclusion (check network conditions)
     */
    504: UpstreamErrorResponse;
};

export type DeprecatedGetUsdQuoteError = DeprecatedGetUsdQuoteErrors[keyof DeprecatedGetUsdQuoteErrors];

export type DeprecatedGetUsdQuoteResponses = {
    /**
     * Successful Response
     */
    200: UsdQuoteResponse;
};

export type DeprecatedGetUsdQuoteResponse = DeprecatedGetUsdQuoteResponses[keyof DeprecatedGetUsdQuoteResponses];

export type DeprecatedBuildSinkCarbonXdrData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Funder
         * public key of the account that pays for the transaction
         */
        funder: string;
        /**
         * Recipient
         * public key of the account that will receive CarbonSINK (default: funder)
         */
        recipient?: string | null;
        /**
         * Carbon Amount
         * the amount of CARBON to sink
         */
        carbon_amount?: number | string;
        /**
         * Payment Asset
         * the preferred asset to pay with when the funder does not have a sufficient CARBON balance
         */
        payment_asset?: PaymentAsset | null;
        /**
         * Vcs Project Id
         * carbon project from which credits will be retired
         */
        vcs_project_id?: VcsProject | null;
        /**
         * Memo Type
         * the kind of memo that will be attached to the transaction
         */
        memo_type?: MemoType | null;
        /**
         * Memo Value
         * description of the reason for offsetting
         */
        memo_value?: string | null;
        /**
         * Email
         * email address that will receive the Verra certificate (also supports `Your Name <account@domain.xyz>` format)
         */
        email?: string | null;
    };
    url: '/sink-carbon/xdr';
};

export type DeprecatedBuildSinkCarbonXdrErrors = {
    /**
     * No payment path was found for this Stellar account
     */
    400: NotFoundErrorResponse;
    /**
     * Stellar account was not found on the Public Global Stellar Network ; September 2015
     */
    404: NotFoundErrorResponse;
    /**
     * Data requested from Horizon is before recorded history
     */
    410: UpstreamErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Horizon's historical database is too stale
     */
    503: UpstreamErrorResponse;
    /**
     * Horizon could not confirm transaction inclusion (check network conditions)
     */
    504: UpstreamErrorResponse;
};

export type DeprecatedBuildSinkCarbonXdrError = DeprecatedBuildSinkCarbonXdrErrors[keyof DeprecatedBuildSinkCarbonXdrErrors];

export type DeprecatedBuildSinkCarbonXdrResponses = {
    /**
     * Successful Response
     */
    200: SinkingResponse;
};

export type DeprecatedBuildSinkCarbonXdrResponse = DeprecatedBuildSinkCarbonXdrResponses[keyof DeprecatedBuildSinkCarbonXdrResponses];

export type DeprecatedGetCarbonStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/stats';
};

export type DeprecatedGetCarbonStatsErrors = {
    /**
     * Horizon transaction has failed or is malformed
     */
    400: UpstreamErrorResponse;
    /**
     * Data requested from Horizon is before recorded history
     */
    410: UpstreamErrorResponse;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Horizon's historical database is too stale
     */
    503: UpstreamErrorResponse;
    /**
     * Horizon could not confirm transaction inclusion (check network conditions)
     */
    504: UpstreamErrorResponse;
};

export type DeprecatedGetCarbonStatsError = DeprecatedGetCarbonStatsErrors[keyof DeprecatedGetCarbonStatsErrors];

export type DeprecatedGetCarbonStatsResponses = {
    /**
     * Successful Response
     */
    200: AssetStats;
};

export type DeprecatedGetCarbonStatsResponse = DeprecatedGetCarbonStatsResponses[keyof DeprecatedGetCarbonStatsResponses];

export type GetCarbonQuoteData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Carbon Amount
         * requested amount of CARBON
         */
        carbon_amount?: number | string;
    };
    url: '/carbon/carbon-quote';
};

export type GetCarbonQuoteErrors = {
    /**
     * Horizon transaction has failed or is malformed
     */
    400: UpstreamErrorResponse;
    /**
     * Data requested from Horizon is before recorded history
     */
    410: UpstreamErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Horizon's historical database is too stale
     */
    503: UpstreamErrorResponse;
    /**
     * Horizon could not confirm transaction inclusion (check network conditions)
     */
    504: UpstreamErrorResponse;
};

export type GetCarbonQuoteError = GetCarbonQuoteErrors[keyof GetCarbonQuoteErrors];

export type GetCarbonQuoteResponses = {
    /**
     * Successful Response
     */
    200: CarbonQuoteResponse;
};

export type GetCarbonQuoteResponse = GetCarbonQuoteResponses[keyof GetCarbonQuoteResponses];

export type GetUsdQuoteData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Usd Amount
         * requested amount of USD
         */
        usd_amount?: number | string;
    };
    url: '/carbon/usd-quote';
};

export type GetUsdQuoteErrors = {
    /**
     * Horizon transaction has failed or is malformed
     */
    400: UpstreamErrorResponse;
    /**
     * Data requested from Horizon is before recorded history
     */
    410: UpstreamErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Horizon's historical database is too stale
     */
    503: UpstreamErrorResponse;
    /**
     * Horizon could not confirm transaction inclusion (check network conditions)
     */
    504: UpstreamErrorResponse;
};

export type GetUsdQuoteError = GetUsdQuoteErrors[keyof GetUsdQuoteErrors];

export type GetUsdQuoteResponses = {
    /**
     * Successful Response
     */
    200: UsdQuoteResponse;
};

export type GetUsdQuoteResponse = GetUsdQuoteResponses[keyof GetUsdQuoteResponses];

export type BuildSinkCarbonXdrData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Funder
         * public key of the account that pays for the transaction
         */
        funder: string;
        /**
         * Recipient
         * public key of the account that will receive CarbonSINK (default: funder)
         */
        recipient?: string | null;
        /**
         * Carbon Amount
         * the amount of CARBON to sink
         */
        carbon_amount?: number | string;
        /**
         * Payment Asset
         * the preferred asset to pay with when the funder does not have a sufficient CARBON balance
         */
        payment_asset?: PaymentAsset | null;
        /**
         * Vcs Project Id
         * carbon project from which credits will be retired
         */
        vcs_project_id?: VcsProject | null;
        /**
         * Memo Type
         * the kind of memo that will be attached to the transaction
         */
        memo_type?: MemoType | null;
        /**
         * Memo Value
         * description of the reason for offsetting
         */
        memo_value?: string | null;
        /**
         * Email
         * email address that will receive the Verra certificate (also supports `Your Name <account@domain.xyz>` format)
         */
        email?: string | null;
    };
    url: '/carbon/sink-carbon/xdr';
};

export type BuildSinkCarbonXdrErrors = {
    /**
     * No payment path was found for this Stellar account
     */
    400: NotFoundErrorResponse;
    /**
     * Stellar account was not found on the Public Global Stellar Network ; September 2015
     */
    404: NotFoundErrorResponse;
    /**
     * Data requested from Horizon is before recorded history
     */
    410: UpstreamErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Horizon's historical database is too stale
     */
    503: UpstreamErrorResponse;
    /**
     * Horizon could not confirm transaction inclusion (check network conditions)
     */
    504: UpstreamErrorResponse;
};

export type BuildSinkCarbonXdrError = BuildSinkCarbonXdrErrors[keyof BuildSinkCarbonXdrErrors];

export type BuildSinkCarbonXdrResponses = {
    /**
     * Successful Response
     */
    200: SinkingResponse;
};

export type BuildSinkCarbonXdrResponse = BuildSinkCarbonXdrResponses[keyof BuildSinkCarbonXdrResponses];

export type GetCarbonStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/carbon/stats';
};

export type GetCarbonStatsErrors = {
    /**
     * Horizon transaction has failed or is malformed
     */
    400: UpstreamErrorResponse;
    /**
     * Data requested from Horizon is before recorded history
     */
    410: UpstreamErrorResponse;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Horizon's historical database is too stale
     */
    503: UpstreamErrorResponse;
    /**
     * Horizon could not confirm transaction inclusion (check network conditions)
     */
    504: UpstreamErrorResponse;
};

export type GetCarbonStatsError = GetCarbonStatsErrors[keyof GetCarbonStatsErrors];

export type GetCarbonStatsResponses = {
    /**
     * Successful Response
     */
    200: AssetStats;
};

export type GetCarbonStatsResponse = GetCarbonStatsResponses[keyof GetCarbonStatsResponses];

export type GetSinkTxsForRecipientData = {
    body?: never;
    path: {
        /**
         * Recipient Address
         * the address by which sinking transactions are filtered
         */
        recipient_address: string;
    };
    query?: {
        /**
         * Finalized
         */
        finalized?: boolean | null;
        /**
         * Cursor
         */
        cursor?: number | string | null;
        /**
         * Limit
         */
        limit?: number | null;
        /**
         * Order
         */
        order?: 'asc' | 'desc';
    };
    url: '/recipients/{recipient_address}/sink-txs';
};

export type GetSinkTxsForRecipientErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type GetSinkTxsForRecipientError = GetSinkTxsForRecipientErrors[keyof GetSinkTxsForRecipientErrors];

export type GetSinkTxsForRecipientResponses = {
    /**
     * Successful Response
     */
    200: SinkTxListResponse;
};

export type GetSinkTxsForRecipientResponse = GetSinkTxsForRecipientResponses[keyof GetSinkTxsForRecipientResponses];

export type GetRetirementsForBeneficiaryData = {
    body?: never;
    path: {
        /**
         * Beneficiary Address
         * the address which is the beneficiary of the retirements
         */
        beneficiary_address: string;
    };
    query?: {
        /**
         * Project
         */
        project?: number | null;
        /**
         * Cursor
         */
        cursor?: number | string | null;
        /**
         * Limit
         */
        limit?: number | null;
        /**
         * Order
         */
        order?: 'asc' | 'desc';
    };
    url: '/recipients/{beneficiary_address}/retirements';
};

export type GetRetirementsForBeneficiaryErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type GetRetirementsForBeneficiaryError = GetRetirementsForBeneficiaryErrors[keyof GetRetirementsForBeneficiaryErrors];

export type GetRetirementsForBeneficiaryResponses = {
    /**
     * Successful Response
     */
    200: RetirementListResponse;
};

export type GetRetirementsForBeneficiaryResponse = GetRetirementsForBeneficiaryResponses[keyof GetRetirementsForBeneficiaryResponses];

export type GetRecipientStatsData = {
    body?: never;
    path: {
        /**
         * Recipient Address
         * the address by which the stats are filtered
         */
        recipient_address: string;
    };
    query?: never;
    url: '/recipients/{recipient_address}/stats';
};

export type GetRecipientStatsErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type GetRecipientStatsError = GetRecipientStatsErrors[keyof GetRecipientStatsErrors];

export type GetRecipientStatsResponses = {
    /**
     * Successful Response
     */
    200: CarbonStats;
};

export type GetRecipientStatsResponse = GetRecipientStatsResponses[keyof GetRecipientStatsResponses];

export type CreateRecipientData = {
    body: CreateRecipientPayload;
    path?: never;
    query?: never;
    url: '/recipients/';
};

export type CreateRecipientErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Authorization header is missing or malformed.
     */
    403: Sep10ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type CreateRecipientError = CreateRecipientErrors[keyof CreateRecipientErrors];

export type CreateRecipientResponses = {
    /**
     * Successful Response
     */
    201: RecipientCreatedResponse;
};

export type CreateRecipientResponse = CreateRecipientResponses[keyof CreateRecipientResponses];

export type DeleteRecipientData = {
    body?: never;
    path: {
        /**
         * Recipient Address
         * the address that is used to identify this recipient
         */
        recipient_address: string;
    };
    query?: never;
    url: '/recipients/{recipient_address}';
};

export type DeleteRecipientErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Authorization header is missing or malformed.
     */
    403: Sep10ErrorResponse;
    /**
     * Recipient was not found in our database
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type DeleteRecipientError = DeleteRecipientErrors[keyof DeleteRecipientErrors];

export type DeleteRecipientResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteRecipientResponse = DeleteRecipientResponses[keyof DeleteRecipientResponses];

export type GetRecipientData = {
    body?: never;
    path: {
        /**
         * Recipient Address
         * the address that is used to identify this recipient
         */
        recipient_address: string;
    };
    query?: never;
    url: '/recipients/{recipient_address}';
};

export type GetRecipientErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Authorization header is missing or malformed.
     */
    403: Sep10ErrorResponse;
    /**
     * Recipient was not found in our database
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type GetRecipientError = GetRecipientErrors[keyof GetRecipientErrors];

export type GetRecipientResponses = {
    /**
     * Successful Response
     */
    200: Recipient;
};

export type GetRecipientResponse = GetRecipientResponses[keyof GetRecipientResponses];

export type UpdateRecipientData = {
    body: RecipientFields;
    path: {
        /**
         * Recipient Address
         * the address that is used to identify this recipient
         */
        recipient_address: string;
    };
    query?: never;
    url: '/recipients/{recipient_address}';
};

export type UpdateRecipientErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Authorization header is missing or malformed.
     */
    403: Sep10ErrorResponse;
    /**
     * Recipient was not found in our database
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type UpdateRecipientError = UpdateRecipientErrors[keyof UpdateRecipientErrors];

export type UpdateRecipientResponses = {
    /**
     * Successful Response
     */
    200: Recipient;
};

export type UpdateRecipientResponse = UpdateRecipientResponses[keyof UpdateRecipientResponses];

export type RequestCertificateData = {
    body?: never;
    path: {
        /**
         * Recipient Address
         * the address for which a retirement certificate will be issued
         */
        recipient_address: string;
    };
    query: {
        /**
         * Email
         * email address that will receive the Verra certificate (also supports `Your Name <account@domain.xyz>` format)
         */
        email: string;
    };
    url: '/recipients/{recipient_address}/request-certificate';
};

export type RequestCertificateErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Authorization header is missing or malformed.
     */
    403: Sep10ErrorResponse;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type RequestCertificateError = RequestCertificateErrors[keyof RequestCertificateErrors];

export type RequestCertificateResponses = {
    /**
     * Successful Response
     */
    200: RequestCertificateResponse;
};

export type RequestCertificateResponse2 = RequestCertificateResponses[keyof RequestCertificateResponses];

export type GetFlightEstimateData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Departure
         */
        departure: string;
        /**
         * Destination
         */
        destination: string;
        cabin_class?: CabinClass;
        /**
         * Trip Type
         */
        trip_type?: 'one-way' | 'round-trip';
    };
    url: '/estimate/flight';
};

export type GetFlightEstimateErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Airport not found. Unknown IATA code.
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type GetFlightEstimateError = GetFlightEstimateErrors[keyof GetFlightEstimateErrors];

export type GetFlightEstimateResponses = {
    /**
     * Successful Response
     */
    200: FlightEstimateResponse;
};

export type GetFlightEstimateResponse = GetFlightEstimateResponses[keyof GetFlightEstimateResponses];

export type GetMintedBlockListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Omit Empty
         */
        omit_empty?: boolean;
        /**
         * Until Date
         */
        until_date?: string | null;
    };
    url: '/minted-blocks/';
};

export type GetMintedBlockListErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type GetMintedBlockListError = GetMintedBlockListErrors[keyof GetMintedBlockListErrors];

export type GetMintedBlockListResponses = {
    /**
     * Successful Response
     */
    200: MintedBlockListResponse;
};

export type GetMintedBlockListResponse = GetMintedBlockListResponses[keyof GetMintedBlockListResponses];

export type GetRetirementListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * For Beneficiary
         */
        for_beneficiary?: string | null;
        /**
         * From Date
         */
        from_date?: string | null;
        /**
         * Before Date
         */
        before_date?: string | null;
        /**
         * Project
         */
        project?: number | null;
        /**
         * Cursor
         */
        cursor?: number | string | null;
        /**
         * Limit
         */
        limit?: number | null;
        /**
         * Order
         */
        order?: 'asc' | 'desc';
    };
    url: '/retirements/';
};

export type GetRetirementListErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type GetRetirementListError = GetRetirementListErrors[keyof GetRetirementListErrors];

export type GetRetirementListResponses = {
    /**
     * Successful Response
     */
    200: RetirementListResponse;
};

export type GetRetirementListResponse = GetRetirementListResponses[keyof GetRetirementListResponses];

export type GetRetirementItemData = {
    body?: never;
    path: {
        /**
         * Certificate Id
         * The retirement's certificate ID
         */
        certificate_id: number;
    };
    query?: never;
    url: '/retirements/{certificate_id}';
};

export type GetRetirementItemErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Retirement was not found in our database
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type GetRetirementItemError = GetRetirementItemErrors[keyof GetRetirementItemErrors];

export type GetRetirementItemResponses = {
    /**
     * Successful Response
     */
    200: RetirementDetail;
};

export type GetRetirementItemResponse = GetRetirementItemResponses[keyof GetRetirementItemResponses];

export type GetSinkTxListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * For Funder
         */
        for_funder?: string | null;
        /**
         * For Recipient
         */
        for_recipient?: string | null;
        /**
         * From Date
         */
        from_date?: string | null;
        /**
         * Before Date
         */
        before_date?: string | null;
        /**
         * Finalized
         */
        finalized?: boolean | null;
        /**
         * Cursor
         */
        cursor?: number | string | null;
        /**
         * Limit
         */
        limit?: number | null;
        /**
         * Order
         */
        order?: 'asc' | 'desc';
    };
    url: '/sink-txs/';
};

export type GetSinkTxListErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type GetSinkTxListError = GetSinkTxListErrors[keyof GetSinkTxListErrors];

export type GetSinkTxListResponses = {
    /**
     * Successful Response
     */
    200: SinkTxListResponse;
};

export type GetSinkTxListResponse = GetSinkTxListResponses[keyof GetSinkTxListResponses];

export type GetSinkTxItemData = {
    body?: never;
    path: {
        /**
         * Tx Hash
         * The sink transaction hash (64 hexadecimal characters)
         */
        tx_hash: string;
    };
    query?: never;
    url: '/sink-txs/{tx_hash}';
};

export type GetSinkTxItemErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Transaction was not found in our database
     */
    404: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
};

export type GetSinkTxItemError = GetSinkTxItemErrors[keyof GetSinkTxItemErrors];

export type GetSinkTxItemResponses = {
    /**
     * Successful Response
     */
    200: SinkTxItem;
};

export type GetSinkTxItemResponse = GetSinkTxItemResponses[keyof GetSinkTxItemResponses];

export type DeprecatedListRetirementsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * For Address
         * Optionally filter the retirements list by Stellar address.
         *
         * This filter does not affect any of the aggregate statistics. Any filtered
         * statistics need to be computed by the client making the request.
         *
         */
        for_address?: string | null;
        /**
         * Date Gte
         * Only list retirements done on or after this date.
         */
        date_gte?: string | null;
    };
    url: '/registry/retirements';
};

export type DeprecatedListRetirementsErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Timeout querying the Verra Registry (8 seconds)
     */
    504: UpstreamErrorResponse;
};

export type DeprecatedListRetirementsError = DeprecatedListRetirementsErrors[keyof DeprecatedListRetirementsErrors];

export type DeprecatedListRetirementsResponses = {
    /**
     * Successful Response
     */
    200: VerraRetirementsResponse;
};

export type DeprecatedListRetirementsResponse = DeprecatedListRetirementsResponses[keyof DeprecatedListRetirementsResponses];

export type DeprecatedListInventoryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/registry/inventory';
};

export type DeprecatedListInventoryErrors = {
    /**
     * The request you sent was invalid in some way
     */
    400: unknown;
    /**
     * An unhandled error occurred on the server
     */
    500: unknown;
    /**
     * Timeout querying the Verra Registry (5 seconds)
     */
    504: UpstreamErrorResponse;
};

export type DeprecatedListInventoryError = DeprecatedListInventoryErrors[keyof DeprecatedListInventoryErrors];

export type DeprecatedListInventoryResponses = {
    /**
     * Successful Response
     */
    200: VerraInventoryResponse;
};

export type DeprecatedListInventoryResponse = DeprecatedListInventoryResponses[keyof DeprecatedListInventoryResponses];

export type ClientOptions = {
    baseUrl: 'https://api.stellarcarbon.io' | (string & {});
};
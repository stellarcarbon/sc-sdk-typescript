// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetSep10ChallengeData, GetSep10ChallengeResponses, GetSep10ChallengeErrors, ValidateSep10ChallengeData, ValidateSep10ChallengeResponses, ValidateSep10ChallengeErrors, DeprecatedGetCarbonQuoteData, DeprecatedGetCarbonQuoteResponses, DeprecatedGetCarbonQuoteErrors, DeprecatedGetUsdQuoteData, DeprecatedGetUsdQuoteResponses, DeprecatedGetUsdQuoteErrors, DeprecatedBuildSinkCarbonXdrData, DeprecatedBuildSinkCarbonXdrResponses, DeprecatedBuildSinkCarbonXdrErrors, DeprecatedGetCarbonStatsData, DeprecatedGetCarbonStatsResponses, DeprecatedGetCarbonStatsErrors, GetCarbonQuoteData, GetCarbonQuoteResponses, GetCarbonQuoteErrors, GetUsdQuoteData, GetUsdQuoteResponses, GetUsdQuoteErrors, BuildSinkCarbonXdrData, BuildSinkCarbonXdrResponses, BuildSinkCarbonXdrErrors, GetCarbonStatsData, GetCarbonStatsResponses, GetCarbonStatsErrors, GetSinkTxsForRecipientData, GetSinkTxsForRecipientResponses, GetSinkTxsForRecipientErrors, GetRetirementsForBeneficiaryData, GetRetirementsForBeneficiaryResponses, GetRetirementsForBeneficiaryErrors, GetRecipientStatsData, GetRecipientStatsResponses, GetRecipientStatsErrors, CreateRecipientData, CreateRecipientResponses, CreateRecipientErrors, DeleteRecipientData, DeleteRecipientResponses, DeleteRecipientErrors, GetRecipientData, GetRecipientResponses, GetRecipientErrors, UpdateRecipientData, UpdateRecipientResponses, UpdateRecipientErrors, RequestCertificateData, RequestCertificateResponses, RequestCertificateErrors, GetFlightEstimateData, GetFlightEstimateResponses, GetFlightEstimateErrors, GetMintedBlockListData, GetMintedBlockListResponses, GetMintedBlockListErrors, GetRetirementListData, GetRetirementListResponses, GetRetirementListErrors, GetRetirementItemData, GetRetirementItemResponses, GetRetirementItemErrors, GetSinkTxListData, GetSinkTxListResponses, GetSinkTxListErrors, GetSinkTxItemData, GetSinkTxItemResponses, GetSinkTxItemErrors, DeprecatedListRetirementsData, DeprecatedListRetirementsResponses, DeprecatedListRetirementsErrors, DeprecatedListInventoryData, DeprecatedListInventoryResponses, DeprecatedListInventoryErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Request a SEP-10 challenge transaction to prove ownership of an account.
 */
export const getSep10Challenge = <ThrowOnError extends boolean = false>(options: Options<GetSep10ChallengeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSep10ChallengeResponses, GetSep10ChallengeErrors, ThrowOnError>({
        url: '/auth/sep-10',
        ...options
    });
};

/**
 * Submit the signed SEP-10 challenge transaction to receive a JWT.
 */
export const validateSep10Challenge = <ThrowOnError extends boolean = false>(options?: Options<ValidateSep10ChallengeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ValidateSep10ChallengeResponses, ValidateSep10ChallengeErrors, ThrowOnError>({
        url: '/auth/sep-10',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a quote of the current CARBON price in USD.
 * Request a price quote for any amount of CARBON.
 *
 * The response includes the total cost of the requested amount, as well as the average price
 * per CARBON. Both are denominated in USD.
 *
 * This quote is non-binding and does not take into account the amount of CARBON that we are
 * currently able to provide from our pool.
 * @deprecated
 */
export const deprecatedGetCarbonQuote = <ThrowOnError extends boolean = false>(options?: Options<DeprecatedGetCarbonQuoteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DeprecatedGetCarbonQuoteResponses, DeprecatedGetCarbonQuoteErrors, ThrowOnError>({
        url: '/carbon-quote',
        ...options
    });
};

/**
 * Get the estimated amount of CARBON that can be purchased for the given price.
 * @deprecated
 */
export const deprecatedGetUsdQuote = <ThrowOnError extends boolean = false>(options?: Options<DeprecatedGetUsdQuoteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DeprecatedGetUsdQuoteResponses, DeprecatedGetUsdQuoteErrors, ThrowOnError>({
        url: '/usd-quote',
        ...options
    });
};

/**
 * Build the XDR for a new CARBON sinking transaction.
 * An offset is done by atomically swapping CARBON for CarbonSINK. This endpoint can be used to
 * build the XDR for such a sinking transaction.
 *
 * If the funder does not have a sufficient balance of CARBON, a path payment will be used to
 * purchase the exact amount of CARBON to be retired. The most favorable rate will be selected
 * from the possible paths. The USDC value of this payment is included in the response for
 * convenience, but it is advisable to always check the generated XDR before signing and
 * submitting it to the network.
 * @deprecated
 */
export const deprecatedBuildSinkCarbonXdr = <ThrowOnError extends boolean = false>(options: Options<DeprecatedBuildSinkCarbonXdrData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeprecatedBuildSinkCarbonXdrResponses, DeprecatedBuildSinkCarbonXdrErrors, ThrowOnError>({
        url: '/sink-carbon/xdr',
        ...options
    });
};

/**
 * Get aggregated stats of the CARBON and CarbonSINK assets.
 * @deprecated
 */
export const deprecatedGetCarbonStats = <ThrowOnError extends boolean = false>(options?: Options<DeprecatedGetCarbonStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DeprecatedGetCarbonStatsResponses, DeprecatedGetCarbonStatsErrors, ThrowOnError>({
        url: '/stats',
        ...options
    });
};

/**
 * Get a quote of the current CARBON price in USD.
 * Request a price quote for any amount of CARBON.
 *
 * The response includes the total cost of the requested amount, as well as the average price
 * per CARBON. Both are denominated in USD.
 *
 * This quote is non-binding and does not take into account the amount of CARBON that we are
 * currently able to provide from our pool.
 */
export const getCarbonQuote = <ThrowOnError extends boolean = false>(options?: Options<GetCarbonQuoteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCarbonQuoteResponses, GetCarbonQuoteErrors, ThrowOnError>({
        url: '/carbon/carbon-quote',
        ...options
    });
};

/**
 * Get the estimated amount of CARBON that can be purchased for the given price.
 */
export const getUsdQuote = <ThrowOnError extends boolean = false>(options?: Options<GetUsdQuoteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsdQuoteResponses, GetUsdQuoteErrors, ThrowOnError>({
        url: '/carbon/usd-quote',
        ...options
    });
};

/**
 * Build the XDR for a new CARBON sinking transaction.
 * An offset is done by atomically swapping CARBON for CarbonSINK. This endpoint can be used to
 * build the XDR for such a sinking transaction.
 *
 * If the funder does not have a sufficient balance of CARBON, a path payment will be used to
 * purchase the exact amount of CARBON to be retired. The most favorable rate will be selected
 * from the possible paths. The USDC value of this payment is included in the response for
 * convenience, but it is advisable to always check the generated XDR before signing and
 * submitting it to the network.
 */
export const buildSinkCarbonXdr = <ThrowOnError extends boolean = false>(options: Options<BuildSinkCarbonXdrData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BuildSinkCarbonXdrResponses, BuildSinkCarbonXdrErrors, ThrowOnError>({
        url: '/carbon/sink-carbon/xdr',
        ...options
    });
};

/**
 * Get aggregated stats of the CARBON and CarbonSINK assets.
 */
export const getCarbonStats = <ThrowOnError extends boolean = false>(options?: Options<GetCarbonStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCarbonStatsResponses, GetCarbonStatsErrors, ThrowOnError>({
        url: '/carbon/stats',
        ...options
    });
};

/**
 * List sinking transactions for the given recipient account.
 */
export const getSinkTxsForRecipient = <ThrowOnError extends boolean = false>(options: Options<GetSinkTxsForRecipientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSinkTxsForRecipientResponses, GetSinkTxsForRecipientErrors, ThrowOnError>({
        url: '/recipients/{recipient_address}/sink-txs',
        ...options
    });
};

/**
 * List finalized retirements for the given beneficiary account.
 */
export const getRetirementsForBeneficiary = <ThrowOnError extends boolean = false>(options: Options<GetRetirementsForBeneficiaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRetirementsForBeneficiaryResponses, GetRetirementsForBeneficiaryErrors, ThrowOnError>({
        url: '/recipients/{beneficiary_address}/retirements',
        ...options
    });
};

/**
 * Get filtered stats for the given recipient account.
 */
export const getRecipientStats = <ThrowOnError extends boolean = false>(options: Options<GetRecipientStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRecipientStatsResponses, GetRecipientStatsErrors, ThrowOnError>({
        url: '/recipients/{recipient_address}/stats',
        ...options
    });
};

/**
 * Create a new recipient in our database.
 */
export const createRecipient = <ThrowOnError extends boolean = false>(options: Options<CreateRecipientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRecipientResponses, CreateRecipientErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recipients/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a recipient from our database.
 */
export const deleteRecipient = <ThrowOnError extends boolean = false>(options: Options<DeleteRecipientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRecipientResponses, DeleteRecipientErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recipients/{recipient_address}',
        ...options
    });
};

/**
 * Fetch a single recipient from our database.
 */
export const getRecipient = <ThrowOnError extends boolean = false>(options: Options<GetRecipientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRecipientResponses, GetRecipientErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recipients/{recipient_address}',
        ...options
    });
};

/**
 * Update any of a recipient's fields; modified_at is automatically set.
 */
export const updateRecipient = <ThrowOnError extends boolean = false>(options: Options<UpdateRecipientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateRecipientResponses, UpdateRecipientErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recipients/{recipient_address}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request the retirement of the whole credits in this account's pending balance.
 */
export const requestCertificate = <ThrowOnError extends boolean = false>(options: Options<RequestCertificateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RequestCertificateResponses, RequestCertificateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recipients/{recipient_address}/request-certificate',
        ...options
    });
};

/**
 * Estimate the CO2 emissions for a flight between two airports.
 */
export const getFlightEstimate = <ThrowOnError extends boolean = false>(options: Options<GetFlightEstimateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFlightEstimateResponses, GetFlightEstimateErrors, ThrowOnError>({
        url: '/estimate/flight',
        ...options
    });
};

/**
 * List minted blocks (current and past inventory).
 */
export const getMintedBlockList = <ThrowOnError extends boolean = false>(options?: Options<GetMintedBlockListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMintedBlockListResponses, GetMintedBlockListErrors, ThrowOnError>({
        url: '/minted-blocks/',
        ...options
    });
};

/**
 * List finalized retirements.
 */
export const getRetirementList = <ThrowOnError extends boolean = false>(options?: Options<GetRetirementListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRetirementListResponses, GetRetirementListErrors, ThrowOnError>({
        url: '/retirements/',
        ...options
    });
};

/**
 * Fetch a single retirement and its instrument details.
 */
export const getRetirementItem = <ThrowOnError extends boolean = false>(options: Options<GetRetirementItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRetirementItemResponses, GetRetirementItemErrors, ThrowOnError>({
        url: '/retirements/{certificate_id}',
        ...options
    });
};

/**
 * List sinking transactions and their retirement status.
 */
export const getSinkTxList = <ThrowOnError extends boolean = false>(options?: Options<GetSinkTxListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSinkTxListResponses, GetSinkTxListErrors, ThrowOnError>({
        url: '/sink-txs/',
        ...options
    });
};

/**
 * Fetch a single sink transaction and its retirement status.
 */
export const getSinkTxItem = <ThrowOnError extends boolean = false>(options: Options<GetSinkTxItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSinkTxItemResponses, GetSinkTxItemErrors, ThrowOnError>({
        url: '/sink-txs/{tx_hash}',
        ...options
    });
};

/**
 * Get the list of Stellarcarbon retirements in the Verra Registry.
 * Fetch the list of finalized CARBON retirements from the Verra Registry.
 *
 * Return all retirements made to the Carbon Sink in the Verra Registry. All information on the
 * retired instruments and their retirement events is directly copied from Verra. We have added
 * a `total_amount_retired` field for convenience, to be able to quickly access the number of
 * tonnes for which Stellarcarbon has finalized their retirement in the registry.
 *
 * This endpoint can be slow to respond due to the upstream query that is done in the Verra Registry.
 * @deprecated
 */
export const deprecatedListRetirements = <ThrowOnError extends boolean = false>(options?: Options<DeprecatedListRetirementsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DeprecatedListRetirementsResponses, DeprecatedListRetirementsErrors, ThrowOnError>({
        url: '/registry/retirements',
        ...options
    });
};

/**
 * Get the list of Stellarcarbon inventory batches in the Verra Registry.
 * Show Stellarcarbon's inventory held in the CARBON Pool in the Verra Registry.
 *
 * Return all batches of credits that are held in the CARBON Pool sub-account. These batches
 * include credits that can still be used as well as credits that have been sunk through
 * Stellarcarbon but whose retirement has yet to be finalized in the Verra Registry, e.g.
 * because of incomplete fractional retirements.
 *
 * The field `total_inventory_credits` contains the sum of all batches in the inventory.
 * @deprecated
 */
export const deprecatedListInventory = <ThrowOnError extends boolean = false>(options?: Options<DeprecatedListInventoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<DeprecatedListInventoryResponses, DeprecatedListInventoryErrors, ThrowOnError>({
        url: '/registry/inventory',
        ...options
    });
};